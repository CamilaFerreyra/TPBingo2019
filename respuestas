El archivo '.travis.yml' es el archivo necesario para realizar la integracion del repositorio
de github con travis. Travis, por su parte, realiza un Integracion Continua del repositorio
corriendo los tests especificados en el archivo para analizar el estado del proyecto que depende
de que Travis pase o no todos los tests especificados. De esta forma Travis ofrece, a traves de su
pagina o con un gadge del archivo README actualizaciones del estado del repositorio luego de cada
commit: funcional o fallando.

Las lineas una a una del archivo '.travis.yml' son:

* language: php. Indica el lenguaje usado en el proyecto
* php:
    - 7.2. Indica la version de php utilizada
* install:
    - composer update --prefer-source. Indica el script a correr para configurar el entorno de testeo
*script:
    - php vendor/bin/phpunit --color tests. Indica el script a correr para testear el proyecto

El archivo 'composer.json' es el archivo utilizado por la aplicacion Composer que es un 
administrador de paquetes para el lenguaje PHP y que se utiliza para administrar las
dependencias de aplicaciones programadas en PHP. 
La diferencia de este archivo con 'composer.lock' es que este se genera y modifica de manera 
automatizada por composer apenas se ejecuta el comando install o cada vez que se realiza un
update. De esta forma Composer bloquea las dependencias especificadas en un punto especifico
del proyecto en vez de revisar las dependencias cada vez que se cambia el archivo 'composer.json'
PSR-4 es un tipo de mapeo de namespaces a direcciones de archivos relativos a la raiz del proyecto.
A su vez Autoload es un archivo dentro de la carpeta vendor (incluida durante la instalacion
de dependencias) en el cual se pueden asociar librerias a namespaces, para librerias que lo incluyan,
o incluso se puede especificar para codigo propio a traves del uso de directivas como PSR-4 o PSR-0.

La alternativa a composer para nodejs es NPM, que seria 'Node Package Manager'.
La alternativa a composer para ruby es RVM, que seria 'Ruby Version Manager'.

Un namespace es un espacio de nombres unicos para funciones y variables, que al incluirse en un
archivo (como sucede en todos los archivos de src y tests) añade nuevos nombres al namespace actual
del archivo. De esta manera, se añaden nuevas funcionalidades y datos que son accesibles desde los
nombres incluidos por el namespace. 
Si se quitasen los namespace de los archivos del proyecto PHP nos informaria al correrlo nuevamente
que faltan definiciones para los nombres que incluia el namespace y por lo tanto, que el proyecto no es
funcional.

El comentario '{@inheritdoc}' marca la herencia de documentacion cuando un metodo de una clase es sobrescrito.
Esto puede suceder devido a la implementacion de una interface o cuando se realiza una extension de otra
clase. En ambos casos la funcion ya existe en el elemento extendido o implementado y posee una documentacion
que es heredada por la nueva implementacion y adjuntada mediante este tag. 

La extension o herencia de clase es un concepto de la programacion orientada a objetos en el cual
existe una superclase o clase padre y la clase heredera o clase hija. El objetivo de la herencia
entre estas dos clases es que la clase padre determine un comportamiento o metodos iniciales que son
heredadas o transferidas al hijo y que luego este extienda el comportamiento inicial ampliandolo o
sobreescribiendolo dependiendo el caso. Un ejemplo de esto seria una clase generica llamada Animal
que implemente las funciones comer, respirar y trasladarse; y una clase llamada Jaguar que herede de 
animal para cambiar y extender las funciones de comer y trasladarse.